
"use client";
import ImageSlider from "@/components/faithInAction/ImageSlider";
import ProjectOverview from "@/components/faithInAction/ProjectOverview";
import PageHeader from "@/components/PageHeader";
import BasicTabs from "../ProgramTabs";
import TeamSection from "../BoardOfDirectors";
import TeamMemberCard from "../TeamMemberCard";
import Member from "../Member";
import AdvisoryBoardIntro from "../AdvisoryBoardIntroduction";
import AdvisoryBoardDetails from "../AdvisoryBoardDetails";

const componentMap = {
  "components.program-header": PageHeader,
  "components.program-introduction": ProjectOverview,
  "components.program-gallery": ImageSlider,
  "sections.program-tabs": BasicTabs,
  "sections.page-header": PageHeader,
  "sections.team-members-section": TeamSection,
  "sections.director-board": TeamSection,
};

const DynamicComponent = ({ component }) => {
  const Component = componentMap[component.__component];

  if (!Component) {
    console.warn(`Component ${component.__component} not found`);
    return null;
  }

  switch (component.__component) {
    case "components.program-header":
      return (
        <Component
          title={component.ProgramTitle}
          backgroundImage={`${process.env.NEXT_PUBLIC_STRAPI_URL}${component.ProgramHeaderImage.data.attributes.url}`}
        />
      );
    case "components.program-introduction":
      return (
        <Component
          title={component.Title}
          description={component.Description}
          image={`${process.env.NEXT_PUBLIC_STRAPI_URL}${component.Image.data.attributes.url}`}
        />
      );
    case "components.program-gallery":
      return (
        <Component
          images={component.Images.data.map((img) => ({
            url: `${process.env.NEXT_PUBLIC_STRAPI_URL}${img.attributes.url}`,
            alt: img.attributes.alternativeText || "",
          }))}
        />
      );
    case "sections.program-tabs":
      return <Component content={component.Tab}></Component>;
    case "sections.page-header":
      return (
        <Component
          title={component.PageTitle}
          backgroundImage={`${process.env.NEXT_PUBLIC_STRAPI_URL}${component.BackgroundImage.data.attributes.url}`}
        />
      );
    case "sections.director-board":
      return (
        <Component
          title={component.TeamName}
          description={component.TeamDescription}
        >
          {component.Director.map((member) => (
            <TeamMemberCard
              key={member.id}
              name={member.MemberName}
              title={member.MemberTitle}
              description={member.MemberDescription}
              photoUrl={`${process.env.NEXT_PUBLIC_STRAPI_URL}${member.MemberImage?.data?.attributes?.url}`}
            />
          ))}
        </Component>
      );
    case "sections.team-members-section":
      return (
        <>
          <Component
            title={component.TeamName}
            description={component.TeamDescription}
            members
          >
            {component.Members && component.Members.length > 0 ? (
              component.Members.map((member) => {
                return (
                  <Member
                    key={member.id}
                    name={member.MemberName}
                    title={member.MemberTitle}
                    photoUrl={
                      member.MemberImage?.data?.attributes?.url
                        ? `${process.env.NEXT_PUBLIC_STRAPI_URL}${member.MemberImage.data.attributes.url}`
                        : undefined
                    }
                  />
                );
              })
            ) : (
              <p>No team members found.</p>
            )}
          </Component>
          {component.TeamName.trim() === "Meet Our Advisory Board" && (
            <>
              <AdvisoryBoardIntro />
              <AdvisoryBoardDetails />
            </>
          )}
        </>
      );
    default:
      return <Component {...component} />;
  }
};

const DynamicZoneRenderer = ({ content }) => {
  return (
    <>
      {content.map((component, index) => (
        <DynamicComponent
          key={`${component.__component}-${index}`}
          component={component}
        />
      ))}
    </>
  );
};

export default DynamicZoneRenderer;

this is literally the code for everything you have to link all the components in this and pass the api data as a prop